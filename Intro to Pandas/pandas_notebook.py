# -*- coding: utf-8 -*-
"""Pandas notebook

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HA9eTHoE3hpJ6vtmqBu-clt2Bhp6ly-M

# Intro to Pandas

Pandas is a Python package for data analysis and exposes two new
data structures: Dataframes and Series.

- [Dataframes](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html) store tabular data consisting of rows and columns.
- [Series](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.html) are similar to Python's built-in list or set data types.

In this notebook, we will explore the dataframe that Pandas
provides, and learn how to interact with them.

### 1. Importing Pandas

To import an external Python library such as Pandas, use Python's
import function. To save yourself some typing later on, you can
give the library you import an alias. Here, we are importing Pandas
and giving it an alias of `pd`.
"""

import pandas as pd
import numpy as np

"""###2. Creating Pandas Series"""

#Creating a pandas series on list of strings values
ser1 = pd.Series(['Lagos', 'Kaduna', 'Kano', 'Imo', 'Abia'])
ser1

#Create a pandas series on list of interger values
ser2 = pd.Series([12, 10, 8, 30, 6, 35, 40])
ser2

#Let's use the pd.Series parameters
state = ['Lagos', 'Kaduna', 'Kano', 'Imo', 'Abia']
capital = ['Ikeja', 'Kaduna', 'Kano', 'Owerri', 'Umuahia']

ser3 = pd.Series(data = state, index = capital)
ser3

#Create a pandas series using a dictionary

ser4 = pd.Series({'Lagos': 'Ikeja', 'Kano': 'Kano', 'Kaduna': 'Kaduna','Abia': 'Unuahia', 'Imo': 'Owerri'})
ser4

"""### 3. Creating A Dataframe
We will load a CSV file as a dataframe using Panda's `read_csv`
method. This will allow us to use Pandas' dataframe functions to
explore the data in the CSV.
"""

# Create a dataframe using a dictionary
num_dict = {'students': ['Emeka', 'Chioma', 'Daniel'],
            'Scores': [76, 77, 64]}
num_dict

# Dictionary to dataframe
df_dict = pd.DataFrame(num_dict)
df_dict

#Create dataframe using a list
num_list = [{'a': 1, 'b': 2, 'c': 3},
            {'a': 4, 'b': 5, 'c': 6}]
num_list

#List to dataframe
df_list = pd.DataFrame(num_list)
df_list

data_dict = {'Name': ['Ibrahim Musa', 'Emeka Jude', 'Emmanuel Ayomide'],
             'Age': [24, 25, 27],
             'Sport': ['Football', 'Basketball', 'Volleyball']}

data_dict2 = {'Name': ['Nnamdi Ike', 'Emmanuel Ayomide', 'Ahmed Musa'],
             'Age': [24, 27, 28],
             'Sport': ['Football', 'Basketball', 'Swimming']}

# Convert data_dict to a DataFrame
df1 = pd.DataFrame(data_dict, index = [0, 1, 2])

df1

# Convert data_dict2 to a DataFrame
df2 = pd.DataFrame(data_dict2, index =[3, 2, 5])

df2

# Joining the two dataframe with concat method
pd.concat([df1, df2])

# Joining the two dataframe with append method
df1.append(df2)

# Combinig data across the columns using concat
pd.concat([df1, df2], axis = 1)

"""###4. Attributes and Methods in dataframe"""

num1_array = np.arange(15).reshape(5, 3)
num1_array

index = ['A', 'B', 'C', 'D', 'E']
columns = ['Col1', 'Col2', 'Col3']

# Array to DataFrame
df1_array = pd.DataFrame(num1_array, index = index, columns = columns)
df1_array

# Attributes of pandas
df1_array.index  #get all the indexes

# get all the columns
df1_array.columns

# get all the values
df1_array.values

df1_array.dtypes

# df1_array.head()
df1_array.tail(3)

"""###5. Working on Datasets

Two different datasets will be used for this section, 
*   The first is a loan default dataset
*   The second is a student profile dataset
"""

df = pd.read_csv ('https://raw.githubusercontent.com/AISaturdaysLagos/cohort7_organization/main/Intro%20to%20Pandas/Loan_Default.csv')
students = pd.read_csv('https://raw.githubusercontent.com/AISaturdaysLagos/cohort7_organization/main/Intro%20to%20Pandas/students%20-%20students.csv')

df.head()

#drop column  index
df.drop('Index', axis='columns', inplace=True)

df.head()

df.shape

df.dtypes

df.describe()

"""### 6. Data Exploration

"""

#checking for missing data
df.isnull().sum().sum()

df.isnull().sum()

#to drop nan values
df.dropna()

#fill nan values with forward fill
df.fillna(method='ffill')

#fill nan values with backward fill
df.fillna(method='bfill')

#Use the ‘mean’ from each column
df.fillna(df.mean(axis=0))

"""###Indexing"""

df['Employed'].head()

# Get rows 1 through 3 and columns 0 through 5.
df.iloc[1:3,:5]

# Get rows with index values of 2-4 and the columns basket_amount and activity
df.loc[2:4, ["Bank Balance", "Employed"]]

#using groupby to get the Bank balance of the Employed and Unemployed
df.groupby(['Employed'])['Bank Balance'].sum()

#using groupby to get the Bank balance of the Defaulters and Non-defaulters
df.groupby(['Defaulted?'])['Bank Balance'].sum()

#Aggregate our data using one or more operations over a specified axis
df.agg(['sum', 'min', 'max'])

#Using some python functions to transform our data
df.transform([np.sqrt, np.exp])

#Apply a function along an axis of the DataFrame
df.apply(np.sum, axis=0)

#Applying a function along an axis of the DataFrame using 'apply'
df.apply(np.sum, axis=1)

"""###7. Plotting using Pandas"""

students.head()

# Using isnull().sum() to get the summary of all null values
students.isnull().sum()

# Using fillna() to fill all null values
students.fillna(value= 0) #fill with zeros(0)

# Use forward fill(ffill) to fill the null values
students.fillna(method= 'ffill')

# Using backward filling
students.fillna(method= 'bfill')

# To drop missing Data
students.dropna()

#using groupby to get the total amount paid per gender
students.groupby(['Gender'])['amount_paid'].sum()

"""### Bar Plot
Barplot is a plot that represent categorical data with rectangular bar with lengths proportional to the values that the represents
"""

#Using barplot to represent the total amount paid per gender
students.groupby(['Gender'])['amount_paid'].sum().plot.bar();

"""### Histogram
A Histogram is a representation of the distribution of data

### Diference Between Barchar and Histogram
Bar plot takes care of categorical variable while histogram takes care of contionous variable
"""

#Histogram plot
students['amount_paid'].plot.hist();

"""### Line plot
This functionis useful to plot lines using DataFrame's values as coordinates
"""

students.plot.line(x = 'student_id', y = 'amount_paid');

"""### Create a DataFrame of Random Data"""

df = pd.DataFrame(np.random.randn(1000, 4), columns = list('ABCD'))

"""###Scatter Plot"""

df.plot.scatter(x = 'A', y = 'B');

#let's change the color by passing in the 'c' parameter
df.plot.scatter(x = 'A', y = 'B', c = 'darkgreen');   #we can change the color to our taste

#We can also use a column as the color, this will generate a heatmap
df.plot.scatter(x = 'A', y = 'B', c = 'C');

